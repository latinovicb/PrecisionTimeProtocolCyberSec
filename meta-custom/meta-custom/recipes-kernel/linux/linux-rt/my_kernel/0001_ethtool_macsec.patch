diff --git a/drivers/net/macsec.c b/drivers/net/macsec.c
index 7de88b3..2ce8b46 100644
--- a/drivers/net/macsec.c
+++ b/drivers/net/macsec.c
@@ -21,6 +21,37 @@
 #include <net/sock.h>
 #include <net/gro_cells.h>
 
+// TODO: delete unneeded
+#include <linux/kernel.h>
+#include <linux/types.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/errno.h>
+#include <linux/slab.h>
+#include <linux/string.h>
+#include <linux/rculist.h>
+#include <linux/notifier.h>
+#include <linux/netdevice.h>
+#include <linux/etherdevice.h>
+#include <linux/ethtool.h>
+#include <linux/if_arp.h>
+#include <linux/if_vlan.h>
+#include <linux/if_link.h>
+#include <linux/if_macvlan.h>
+#include <linux/hash.h>
+#include <linux/workqueue.h>
+#include <net/rtnetlink.h>
+#include <net/xfrm.h>
+#include <linux/netpoll.h>
+#include <linux/delay.h>
+#include <linux/dma-mapping.h>
+#include <linux/dmapool.h>
+#include <linux/io.h>
+#include <linux/net_tstamp.h>
+#include <linux/phy.h>
+#include <linux/platform_device.h>
+#include <linux/ptp_classify.h>
+
 #include <uapi/linux/if_macsec.h>
 
 typedef u64 __bitwise sci_t;
@@ -268,6 +299,7 @@ struct pcpu_secy_stats {
 struct macsec_dev {
 	struct macsec_secy secy;
 	struct net_device *real_dev;
+	struct net_device *phydev;
 	struct pcpu_secy_stats __percpu *stats;
 	struct list_head secys;
 	struct gro_cells gro_cells;
@@ -2968,6 +3000,101 @@ static int macsec_get_nest_level(struct net_device *dev)
 	return macsec_priv(dev)->nest_level;
 }
 
+// gets driver info
+static void macsec_ethtool_get_drvinfo(struct net_device *dev,
+					struct ethtool_drvinfo *drvinfo)
+{
+	strlcpy(drvinfo->driver, "macsec", sizeof(drvinfo->driver));
+	strlcpy(drvinfo->version, "0.1", sizeof(drvinfo->version));
+}
+
+// gets ksettings
+static int macsec_ethtool_get_link_ksettings(struct net_device *dev,
+					      struct ethtool_link_ksettings *cmd)
+{
+	const struct macsec_dev *sec = netdev_priv(dev);
+
+	return __ethtool_get_link_ksettings(sec->real_dev, cmd);
+}
+
+static int macsec_get_ts_info(struct net_device *dev,
+			      struct ethtool_ts_info *info)
+{
+  // change "vlan" variable to better name
+	const struct macsec_dev *macsec = macsec_priv(dev);
+	const struct ethtool_ops *ops = macsec->real_dev->ethtool_ops;
+	struct phy_device *phydev = macsec->real_dev->phydev;
+
+	if (phydev && phydev->drv && phydev->drv->ts_info) {
+		 return phydev->drv->ts_info(phydev, info);
+	} else if (ops->get_ts_info) {
+		return ops->get_ts_info(macsec->real_dev, info);
+	} else {
+    info->so_timestamping =
+      SOF_TIMESTAMPING_TX_SOFTWARE |
+      SOF_TIMESTAMPING_RX_SOFTWARE |
+      SOF_TIMESTAMPING_SOFTWARE;
+		info->phc_index = -1;
+	}
+
+	return 0;
+}
+
+// get link imported from ethtool
+static const struct ethtool_ops macsec_ethtool_ops = {
+	.get_link		= ethtool_op_get_link,
+    .get_ts_info    	= macsec_get_ts_info,
+	.get_link_ksettings	= macsec_ethtool_get_link_ksettings,
+	.get_drvinfo		= macsec_ethtool_get_drvinfo,
+};
+
+static int macsec_dev_ioctl(struct net_device *dev, struct ifreq *ifr, int cmd)
+{
+
+	// struct macsec_dev *macsec = netdev_priv(dev);
+	// struct net_device *real_dev = macsec->real_dev;
+
+	// struct net_device *real_dev = macsec_priv(dev)->real_dev;
+
+	struct net_device *real_dev = macsec_priv(dev)->real_dev;
+	const struct net_device_ops *ops = real_dev->netdev_ops;
+	struct ifreq ifrr;
+	int err = -EOPNOTSUPP;
+
+	strncpy(ifrr.ifr_name, real_dev->name, IFNAMSIZ);
+	ifrr.ifr_ifru = ifr->ifr_ifru;
+
+	switch (cmd) {
+	case SIOCGMIIPHY:
+	case SIOCGMIIREG:
+	case SIOCSMIIREG:
+	case SIOCSHWTSTAMP:
+	case SIOCGHWTSTAMP:
+		if (netif_device_present(real_dev) && ops->ndo_do_ioctl)
+			err = ops->ndo_do_ioctl(real_dev, &ifrr, cmd);
+		break;
+	}
+
+	if (!err)
+		ifr->ifr_ifru = ifrr.ifr_ifru;
+
+	return err;
+}
+
+//// Timestamping function must be separatetly created for driver it seems
+// static int eth_ioctl(struct net_device *dev, struct ifreq *req, int cmd)
+// {
+// 	if (!netif_running(dev))
+// 		return -EINVAL;
+
+//   if (cmd == SIOCSHWTSTAMP)
+//     return hwtstamp_set(dev, req);
+//   if (cmd == SIOCGHWTSTAMP)
+//     return hwtstamp_get(dev, req);
+
+// 	return phy_mii_ioctl(dev->phydev, req, cmd);
+// }
+
 
 static const struct net_device_ops macsec_netdev_ops = {
 	.ndo_init		= macsec_dev_init,
@@ -2983,6 +3110,7 @@ static const struct net_device_ops macsec_netdev_ops = {
 	.ndo_get_stats64	= macsec_get_stats64,
 	.ndo_get_iflink		= macsec_get_iflink,
 	.ndo_get_lock_subclass  = macsec_get_nest_level,
+	.ndo_do_ioctl		= macsec_dev_ioctl,
 };
 
 static const struct device_type macsec_type = {
@@ -3024,6 +3152,7 @@ static void macsec_setup(struct net_device *dev)
 	dev->netdev_ops = &macsec_netdev_ops;
 	dev->needs_free_netdev = true;
 	dev->priv_destructor = macsec_free_netdev;
+  	dev->ethtool_ops = &macsec_ethtool_ops;
 	SET_NETDEV_DEVTYPE(dev, &macsec_type);
 
 	eth_zero_addr(dev->broadcast);
@@ -3254,6 +3383,7 @@ static int macsec_newlink(struct net *net, struct net_device *dev,
 	dev->priv_flags |= IFF_MACSEC;
 
 	macsec->real_dev = real_dev;
+	macsec->phydev = real_dev;
 
 	if (data && data[IFLA_MACSEC_ICV_LEN])
 		icv_len = nla_get_u8(data[IFLA_MACSEC_ICV_LEN]);
